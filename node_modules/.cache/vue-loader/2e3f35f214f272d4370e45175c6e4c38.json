{"remainingRequest":"C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\src\\components\\FormPayment.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\src\\components\\FormPayment.vue","mtime":1567495560674},{"path":"C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lucas\\projects\\AlayaCare test\\credit-card-checkout\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport VInputText from './VInputText';\r\nimport VInputSelect from './VInputSelect';\r\n\r\nexport default {\r\n    name: 'FormPayment',\r\n    components: {\r\n        VInputText,\r\n        VInputSelect,\r\n    },\r\n    data () {\r\n        return {\r\n            months: [\r\n                '01','02','03','04','05','06',\r\n                '07','08','09','10','11','12'\r\n            ],\r\n            years: [],\r\n            formPaymentData: {\r\n                nameOnCard: '',\r\n                cardNumber: 0,\r\n                expirationDate: {\r\n                    month: 0,\r\n                    year: 0\r\n                },\r\n                CVV: 0\r\n            },\r\n            formErrors: []\r\n        }\r\n    },\r\n    methods : {\r\n        submit() {\r\n\r\n            if (this.formPaymentData.nameOnCard === '') {\r\n                this.insertError('nameOnCard','Required!');\r\n            } else {\r\n                this.resetError('nameOnCard')\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.cardNumber.toString() === '') || \r\n                    (this.formPaymentData.cardNumber === 0) \r\n            ) {\r\n                this.insertError('cardNumber','Required!');\r\n            } else if (this.formPaymentData.cardNumber.toString().length != 16) {\r\n                this.insertError('cardNumber','Out of Range!');\r\n            }  else {\r\n                this.resetError('cardNumber');\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.expirationDate.month.toString() === '') || \r\n                    (this.formPaymentData.expirationDate.month === 0) \r\n            ) {\r\n                this.insertError('month','Required!');\r\n            }else {\r\n                this.resetError('month');\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.expirationDate.year.toString() === '') || \r\n                    (this.formPaymentData.expirationDate.year === 0) \r\n            ) {\r\n                this.insertError('year','Required!');\r\n            }else {\r\n                this.resetError('year');\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.CVV.toString() === '') || \r\n                    (this.formPaymentData.CVV === 0) \r\n            ) {\r\n                this.insertError('CVV','Required!');\r\n            } else if (this.formPaymentData.CVV.toString().length > 4) {\r\n                this.insertError('CVV','Out of Range!');\r\n            } else {\r\n                this.resetError('CVV');\r\n            }\r\n\r\n            if (this.formErrors.length === 0) {\r\n                this.$emit('submit',this.formPaymentData);\r\n            }\r\n        },\r\n        insertError (field, message) {\r\n            this.formErrors.push(\r\n                {\r\n                    field : field,\r\n                    hasError: true,\r\n                    message: message\r\n                }\r\n            );\r\n        },\r\n        getError(field) {\r\n            let index = this.formErrors.findIndex ((error) => (error.field === field));\r\n            if ( index > -1) {\r\n                return this.formErrors[index];\r\n            } else {\r\n                return {\r\n                    hasError: false,\r\n                    message: ''\r\n                }\r\n            }\r\n        },\r\n        resetError (field) {\r\n            this.formErrors = this.formErrors.filter(\r\n                (error) => (error.field !== field)\r\n            )\r\n        },\r\n        onInput (event) {\r\n            const CVV_ONLY_NUMBER = /^\\d+$/.test(event.value); \r\n            const CARD_NUMBER_ONLY_NUMBER = /^\\d+$/.test(event.value); \r\n            \r\n            switch(event.key){\r\n                case 'nameOnCard':\r\n                    this.resetError('nameOnCard');\r\n                    this.formPaymentData.nameOnCard = event.value.toUpperCase();\r\n                    break;\r\n                case 'cardNumber':\r\n                    this.resetError('cardNumber');\r\n                    if ( (CARD_NUMBER_ONLY_NUMBER) || (event.value === '') ) {\r\n                        this.formPaymentData.cardNumber = event.value;\r\n                    }\r\n                    break;\r\n                case 'month': \r\n                    this.resetError('month');\r\n                    this.formPaymentData.expirationDate.month = Number(event.value);\r\n                    break;\r\n                case 'year': \r\n                    this.resetError('year');\r\n                    this.formPaymentData.expirationDate.year = Number(event.value);\r\n                    break;\r\n                case 'CVV': \r\n                    this.resetError('CVV');\r\n                    if ( (CVV_ONLY_NUMBER) || (event.value === '') ) {\r\n                        this.formPaymentData.CVV = Number(event.value);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    beforeMount () {\r\n        const currentYear = new Date().getFullYear();\r\n        for (let i = 0;i <= 9; i++) {\r\n            this.years.push((currentYear+i).toString());\r\n        }\r\n    }\r\n}\r\n",{"version":3,"sources":["FormPayment.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FormPayment.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"field name-on-card\">\r\n            <VInputText \r\n                v-bind:value=\"formPaymentData.nameOnCard\"\r\n                name=\"nameOnCard\" \r\n                label=\"Name On Card:\" \r\n                v-on:input=\"onInput\"\r\n                v-bind:error=\"this.getError('nameOnCard')\"\r\n            />\r\n        </div>\r\n        <div class=\"field name-on-card\">\r\n            <VInputText\r\n                v-bind:value=\"(formPaymentData.cardNumber === 0)? '': formPaymentData.cardNumber.toString()\"\r\n                name=\"cardNumber\"\r\n                type=\"number\"\r\n                label=\"Card Number:\"\r\n                v-on:input=\"onInput\"\r\n                v-bind:error=\"this.getError('cardNumber')\"\r\n            />\r\n        </div>\r\n        <div class=\"expiration-date-container\">\r\n            <div class=\"field label\">Expiration Date</div>\r\n            <div>\r\n                <div class=\"field expiration-date-month\">    \r\n                    <VInputSelect \r\n                        name=\"month\"  \r\n                        label=\"MM\"\r\n                        v-bind:value=\"(formPaymentData.expirationDate.month === 0)? '': formPaymentData.expirationDate.month.toString()\"\r\n                        v-on:input=\"onInput\"\r\n                        v-bind:items=\"months\"\r\n                        v-bind:error=\"this.getError('month')\"\r\n                    />\r\n                </div>\r\n                <div class=\"field expiration-date-year \">    \r\n                    <VInputSelect \r\n                        name=\"year\"  \r\n                        label=\"YYYY\"\r\n                        v-bind:value=\"(formPaymentData.expirationDate.year === 0)? '': formPaymentData.expirationDate.year.toString()\"\r\n                        v-on:input=\"onInput\"\r\n                        v-bind:items=\"years\"\r\n                        v-bind:error=\"this.getError('year')\"\r\n                    />\r\n                </div>\r\n                <div class=\"field expiration-date-year \">    \r\n                    <VInputText \r\n                        v-bind:value=\"(formPaymentData.CVV === 0)? '': formPaymentData.CVV.toString()\"\r\n                        name=\"CVV\"  \r\n                        label=\"CVV:\"\r\n                        v-on:input=\"onInput\"\r\n                        v-bind:error=\"this.getError('CVV')\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"button-container\">\r\n            <div class=\"button\" v-on:click=\"submit\">Check Out.</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport VInputText from './VInputText';\r\nimport VInputSelect from './VInputSelect';\r\n\r\nexport default {\r\n    name: 'FormPayment',\r\n    components: {\r\n        VInputText,\r\n        VInputSelect,\r\n    },\r\n    data () {\r\n        return {\r\n            months: [\r\n                '01','02','03','04','05','06',\r\n                '07','08','09','10','11','12'\r\n            ],\r\n            years: [],\r\n            formPaymentData: {\r\n                nameOnCard: '',\r\n                cardNumber: 0,\r\n                expirationDate: {\r\n                    month: 0,\r\n                    year: 0\r\n                },\r\n                CVV: 0\r\n            },\r\n            formErrors: []\r\n        }\r\n    },\r\n    methods : {\r\n        submit() {\r\n\r\n            if (this.formPaymentData.nameOnCard === '') {\r\n                this.insertError('nameOnCard','Required!');\r\n            } else {\r\n                this.resetError('nameOnCard')\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.cardNumber.toString() === '') || \r\n                    (this.formPaymentData.cardNumber === 0) \r\n            ) {\r\n                this.insertError('cardNumber','Required!');\r\n            } else if (this.formPaymentData.cardNumber.toString().length != 16) {\r\n                this.insertError('cardNumber','Out of Range!');\r\n            }  else {\r\n                this.resetError('cardNumber');\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.expirationDate.month.toString() === '') || \r\n                    (this.formPaymentData.expirationDate.month === 0) \r\n            ) {\r\n                this.insertError('month','Required!');\r\n            }else {\r\n                this.resetError('month');\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.expirationDate.year.toString() === '') || \r\n                    (this.formPaymentData.expirationDate.year === 0) \r\n            ) {\r\n                this.insertError('year','Required!');\r\n            }else {\r\n                this.resetError('year');\r\n            }\r\n\r\n            if  ( \r\n                    (this.formPaymentData.CVV.toString() === '') || \r\n                    (this.formPaymentData.CVV === 0) \r\n            ) {\r\n                this.insertError('CVV','Required!');\r\n            } else if (this.formPaymentData.CVV.toString().length > 4) {\r\n                this.insertError('CVV','Out of Range!');\r\n            } else {\r\n                this.resetError('CVV');\r\n            }\r\n\r\n            if (this.formErrors.length === 0) {\r\n                this.$emit('submit',this.formPaymentData);\r\n            }\r\n        },\r\n        insertError (field, message) {\r\n            this.formErrors.push(\r\n                {\r\n                    field : field,\r\n                    hasError: true,\r\n                    message: message\r\n                }\r\n            );\r\n        },\r\n        getError(field) {\r\n            let index = this.formErrors.findIndex ((error) => (error.field === field));\r\n            if ( index > -1) {\r\n                return this.formErrors[index];\r\n            } else {\r\n                return {\r\n                    hasError: false,\r\n                    message: ''\r\n                }\r\n            }\r\n        },\r\n        resetError (field) {\r\n            this.formErrors = this.formErrors.filter(\r\n                (error) => (error.field !== field)\r\n            )\r\n        },\r\n        onInput (event) {\r\n            const CVV_ONLY_NUMBER = /^\\d+$/.test(event.value); \r\n            const CARD_NUMBER_ONLY_NUMBER = /^\\d+$/.test(event.value); \r\n            \r\n            switch(event.key){\r\n                case 'nameOnCard':\r\n                    this.resetError('nameOnCard');\r\n                    this.formPaymentData.nameOnCard = event.value.toUpperCase();\r\n                    break;\r\n                case 'cardNumber':\r\n                    this.resetError('cardNumber');\r\n                    if ( (CARD_NUMBER_ONLY_NUMBER) || (event.value === '') ) {\r\n                        this.formPaymentData.cardNumber = event.value;\r\n                    }\r\n                    break;\r\n                case 'month': \r\n                    this.resetError('month');\r\n                    this.formPaymentData.expirationDate.month = Number(event.value);\r\n                    break;\r\n                case 'year': \r\n                    this.resetError('year');\r\n                    this.formPaymentData.expirationDate.year = Number(event.value);\r\n                    break;\r\n                case 'CVV': \r\n                    this.resetError('CVV');\r\n                    if ( (CVV_ONLY_NUMBER) || (event.value === '') ) {\r\n                        this.formPaymentData.CVV = Number(event.value);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    beforeMount () {\r\n        const currentYear = new Date().getFullYear();\r\n        for (let i = 0;i <= 9; i++) {\r\n            this.years.push((currentYear+i).toString());\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.expiration-date-container{\r\n    width: 100%;\r\n    margin-left: 10%;\r\n}\r\n\r\n.field {\r\n    margin-top: 7%;\r\n    color: #DDD;\r\n    font-size: 0.5em;\r\n}\r\n\r\n.name-on-card {\r\n    margin-left:10%;\r\n    width: 80%;\r\n}\r\n\r\n.expiration-date-month {\r\n    float: left;\r\n    margin-top: 0%;\r\n    margin-left: 0%;\r\n    width: 20%;\r\n}\r\n\r\n.expiration-date-year {\r\n    float: left;\r\n    margin-top: 0%;\r\n    margin-left: 10%;\r\n    width: 20%;\r\n}\r\n\r\n.label {\r\n    width: 100%;\r\n}\r\n\r\n.button-container {\r\n    margin-top: 20%;\r\n    margin-left: 17%;\r\n}\r\n\r\n.button {\r\n    cursor: pointer;\r\n    background-color: #407CE7;\r\n    color: #FFF;\r\n    font-size: 0.8em;\r\n    width: 80%;\r\n    height: 45px;\r\n    border-radius: 5pt;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    -webkit-box-shadow: 0px 0px 36px -5px rgba(64,125,231,1); /* Chrome all / Safari all */\r\n    -moz-box-shadow: 0px 0px 36px -5px rgba(64,125,231,1); /* Firefox all             */\r\n    box-shadow: 0px 0px 36px -5px rgba(64,125,231,1); /* Likely future           */\r\n    -webkit-user-select: none; /* Chrome all / Safari all */\r\n    -moz-user-select: none;    /* Firefox all             */\r\n    -ms-user-select: none;     /* IE 10+                  */\r\n    user-select: none;        /* Likely future           */\r\n\r\n}\r\n</style>"]}]}